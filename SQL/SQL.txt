데이터베이스 :  테이블들이 저장된 저장소.
테이블 : 실제 데이터가 있는 위치.

SQL: 테이블에 있는 데이터를 조회하는 명령어
===============================
일반쿼리
----------------------------------------
## EMP 테이블

empno : 사원 번호
ename : 사원 이름
job : 직책, 직무
mgr : 내 사수 번호
hiredate : 입사 날짜
sal : 급여
comm : (커미션)보너스
deptno : 부서 번호

-- count(*) : 전체를 의미한다!!!
---------------------------------------

## DEPT 테이블

deptno : 부서번호
dname : 부서이름
loc : 부서위치
---------------------------------------

데이터 조작 언어: DML 혹은 CRUD(read, create, update, delete)

SELECT : 조회 (read)
 SELECT 컬럼이름 FROM 테이블이름

INSERT : 입력/추가 (create)
 INSERT INTO 테이블이름(컬럼이름) VALUES (데이터)

UPDATE : 
 UPADTE 데이블이름
 SET 컬럼이름 = 데이터
********* ★★★UPDATE는 DELETE했다가 INSERT하는 거임!
DELETE
 DELETE FROM 테이블이름

WHERE : 함수X /필터링 (*집계함수 사용시 오류!! 
HAVING : 함수O /집계함수 사용이 가능한 필터링 ex) sum, max, min, count, avg

---------------------------------------
숫자, 문자 구분 확실히!!

SELECT <컬럼 조회
FROM <테이블 이름
WHERE <필터링
GROUP BY <그룹핑 (관련 있는 것들끼리) ex) 연봉, 입사 날짜, 부서번호, 직업
HAVING <그룹핑 관련 필터링
ORDER BY <정렬 (**디폴트값: asc 오름차순/ dec 내림차순**

=======================
고급쿼리

조인 Join
: 두 개 이상의 테이블을 동시에 조회할 때 쓴다!
예시) emp 사원테이블과 dept 회사테이블
**교집합이 되는 공통점이 있어야만 조인 가능!!!

1. INNER JOIN : 교집합 요소를 통해 두 테이블을 대조함.
2. SELF JOIN : 본인 테이블 한번 더 조인함.

SELECT ㅇㅇ테이블
FROM emp AS e INNER JOIN dept AS d       : 테이블이름을 편하게 축약한다!!!
ON e.칼럼 = d.칼럼      : 교집합 데이터가 같다면! 조인해줘!!

3. LEFT JOIN, RIGHT JOIN
차집합(공통되지 않는 정보)까지 가져오고 싶으면 우측인지 좌측인지 선택해서 조회 가능!
-----------------------

실행 순서!★★★★★***************************************************
 from(항상 시작!) -> where -> group by -> having -> select -> order by (항상마지막!)




★★★★★★★★★★
ㅇㅇ별 == group by
ex) 부서별 == group by deptno (인사과, 행정과, 마케팅부 등등으로 나누는 느낌이다!)

sum은 어느 테이블에도 쓸 수 있는 함수라서 굳이 테이블별칭을 붙일 필요가 없다!
avg, min, max 등등... ex) d.sum <- 이럴 필요 없음!